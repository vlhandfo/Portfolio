[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Victoria Handford",
    "section": "",
    "text": "I am a creative and curious individual with a strong passion for learning through hands-on experience. With expertise in Natural Language Processing (NLP), I thrive when solving complex problems and tackling puzzles, always seeking innovative solutions. My work is deeply rooted in my ethical values, and I prioritize integrity and responsible practices in every project I undertake."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Victoria Handford",
    "section": "Education",
    "text": "Education\nI am currently finishing my Master’s in Informatics: Language Technology at the University of Oslo after having completed the Bachelor’s program. My thesis focuses on linguistic representativeness of large language models from a typological perspective. Additionally, I have a Bachelor’s degree in Music and German from the University of Nebraska-Lincoln."
  },
  {
    "objectID": "projects/titanic/PDF-CDF.html",
    "href": "projects/titanic/PDF-CDF.html",
    "title": "Representing Probabilities Aboard the Titanic",
    "section": "",
    "text": "Demo Resource\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"data/titanic.csv\")\n\nage_list = df[\"Age\"].dropna()\nmean_age = age_list.mean()\n\nd = age_list.describe()\n\nmetrics_df = pd.DataFrame(d).T\nmetrics_df\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nAge\n714.0\n29.699118\n14.526497\n0.42\n20.125\n28.0\n38.0\n80.0\nsns.displot(age_list, bins=16)\nplt.title(\"Distribution of Age of Passengers Aboard the Titanic\")\nplt.axvline(x=mean_age, color=\"black\", linestyle=\"dashed\", label=\"Mean Age\")\nplt.legend()\nplt.show()\nsns.displot(age_list, bins=16)\nplt.title(\"Distribution of Age of Passengers Aboard the Titanic\")\nplt.axvline(x=age_list.median(), color=\"red\", label=\"Median\")\nplt.axvline(x=d[\"75%\"], color=\"red\", linestyle=\"dashed\", label=\"Q1\")\nplt.axvline(x=d[\"25%\"], color=\"red\", linestyle=\"dashed\", label=\"Q3\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "projects/titanic/PDF-CDF.html#probability-density-function-pdf",
    "href": "projects/titanic/PDF-CDF.html#probability-density-function-pdf",
    "title": "Representing Probabilities Aboard the Titanic",
    "section": "Probability Density Function (PDF)",
    "text": "Probability Density Function (PDF)\n\nsns.displot(age_list, kind=\"kde\")\nplt.text(4, 0.035, \"Probability Density Function (PDF)\")\nplt.axvline(x=mean_age, color=\"black\", linestyle=\"dashed\", label=\"Mean Age\")\nplt.axvline(x=16, color=\"red\", label=\"Age 16\")\nplt.title(\"Distribution of Age of Passengers Aboard the Titanic\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "projects/titanic/PDF-CDF.html#cumulative-distribution-function",
    "href": "projects/titanic/PDF-CDF.html#cumulative-distribution-function",
    "title": "Representing Probabilities Aboard the Titanic",
    "section": "Cumulative Distribution Function",
    "text": "Cumulative Distribution Function\n\nsns.displot(age_list, kind=\"ecdf\")\nplt.text(4.5, 1.075, \"Empirical Culumative Distribution Function (PDF)\")\nplt.title(\"Distribution of Age of Passengers Aboard the Titanic\")\nplt.axvline(x=mean_age, color=\"black\", linestyle=\"dashed\", label=\"Mean Age\")\nplt.axvline(x=16, color=\"red\", label=\"Age 16\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html",
    "href": "projects/titanic/EDA-titanic.html",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "",
    "text": "Starting point: Make School Tutorial\nData set: Titanic - Machine Learning from Disaster"
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html#features-that-need-explanation",
    "href": "projects/titanic/EDA-titanic.html#features-that-need-explanation",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "Features (that need explanation)",
    "text": "Features (that need explanation)\n\n\n\n\n\n\n\n\nFeature\nDefinition\nKey\n\n\n\n\nSurvived\nsurvival\n0 = no; 1 = yes\n\n\nPclass\nTicket Class\n1 = 1st; 2 = 2nd; 3 = 3rd\n\n\nSibSp\n# of sbilings/spouses aboard\nint\n\n\nParch¹\n# of parents / children aboard\nint\n\n\nEmbarked\nPort of Embarkment\nC = Cherbourg; Q = Queenstown; S = Southampton\n\n\n\nNotes:\n¹ Some children travelled only with a nanny, therefore \\(parch = 0\\) for them.\n² Age is a fraction if less than 1\n\nRemove unnecessary features\nBecause I am just looking at the data, some of the features are not necessarily needed.\n\ndf = df.drop(columns=[\"PassengerId\"])    # Same as index\n\n\n# Distribution of quantitative features across all instances\ndf.hist(figsize=(8,9))\n\narray([[&lt;Axes: title={'center': 'Survived'}&gt;,\n        &lt;Axes: title={'center': 'Pclass'}&gt;],\n       [&lt;Axes: title={'center': 'Age'}&gt;,\n        &lt;Axes: title={'center': 'SibSp'}&gt;],\n       [&lt;Axes: title={'center': 'Parch'}&gt;,\n        &lt;Axes: title={'center': 'Fare'}&gt;]], dtype=object)\n\n\n\n\n\n\n\n\n\n\n# Features that I want to see the percentage distribution of\nto_explore = ['Survived', 'Pclass', 'Sex', 'Embarked']\nfor feat in to_explore:\n    display(df[feat].value_counts(normalize=True))\n\n0    0.616162\n1    0.383838\nName: Survived, dtype: float64\n\n\n3    0.551066\n1    0.242424\n2    0.206510\nName: Pclass, dtype: float64\n\n\nmale      0.647587\nfemale    0.352413\nName: Sex, dtype: float64\n\n\nS    0.724409\nC    0.188976\nQ    0.086614\nName: Embarked, dtype: float64"
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html#observations",
    "href": "projects/titanic/EDA-titanic.html#observations",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "Observations",
    "text": "Observations\n\n61 percent of passengers did not survive the voyage.\n55 percent of passengers were in 3rd class.\n65 percent of passengers were male.\n72 percent of boarded in Southampton"
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html#looking-at-age-and-fare-closer",
    "href": "projects/titanic/EDA-titanic.html#looking-at-age-and-fare-closer",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "Looking at “Age” and “Fare” Closer",
    "text": "Looking at “Age” and “Fare” Closer\n\n# Age Histogram\nplt.hist(df['Age'])\nplt.axvline(df['Age'].mean(), color='k', linestyle='dashed', linewidth=1, label=\"Mean\")\nplt.title('Distribution of the Ages of Passengers on Titanic')\nplt.ylabel('Count')\nplt.xlabel('Age (in Years)')\nplt.axvline(df['Age'].mean() + df['Age'].std(), color='orange', linestyle='dashed', linewidth=1, label=\"Standard Deviation\")\nplt.axvline(df['Age'].mean() - df['Age'].std(), color='orange', linestyle='dashed', linewidth=1)\nplt.text(57,140, f\"Youngest: {df['Age'].min()}\\n\" \\\n         f\"Oldest: {df['Age'].max()}\",\n         backgroundcolor=\"lightgray\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Fare Histogram\nplt.hist(df['Fare'])\nplt.axvline(df['Fare'].mean(), color='k', linestyle='dashed', linewidth=1, label=\"Mean\")\nplt.title('Distribution of the Fares of Passengers on Titanic')\nplt.ylabel('Count')\nplt.xlabel('Fare (in Years)')\nplt.axvline(df['Fare'].mean() + df['Fare'].std(), color='orange', linestyle='dashed', linewidth=1, label=\"Standard Deviation\")\nplt.axvline(df['Fare'].mean() - df['Fare'].std(), color='orange', linestyle='dashed', linewidth=1)\nplt.text(335, 575, f\"Minimum Fare: {df['Fare'].min()}\\n\" \\\n         f\"Maximum Fare: {df['Fare'].max():.2f}\",\n         backgroundcolor=\"lightgray\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nConclusion\nHere, we can see that fares had a much larger variance than ages. This is also limited by the fact that a passenger can pay $500, but not live to be 500 years old."
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html#considering-biological-sex",
    "href": "projects/titanic/EDA-titanic.html#considering-biological-sex",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "Considering Biological Sex",
    "text": "Considering Biological Sex\n\nsex = {\"male\": 1, \"female\": 0}\ndf[\"Sex\"] = df[\"Sex\"].map(sex)\n\n\nsns.heatmap(df.corr(), annot=True)\nplt.title(\"Correlations Including Sex\")\nplt.show()\n\n/tmp/ipykernel_24096/631369191.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  sns.heatmap(df.corr(), annot=True)\n\n\n\n\n\n\n\n\n\nNote: There is a strong correlation between Sex and Survival!"
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html#women-and-children-first-hypothesis",
    "href": "projects/titanic/EDA-titanic.html#women-and-children-first-hypothesis",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "“Women and Children First” Hypothesis",
    "text": "“Women and Children First” Hypothesis\nWe found a correlation between Sex and Survival, but not between Age and Survival.\n\n# Women and children\nw_c = df[(df['Sex'] == 0) | (df['Age'] &lt; 16)]\n\n# Survival Rate\n# Normalize to get percentage over relative frequency\nw_c_sr = w_c[\"Survived\"].value_counts(normalize=True)\nprint(\"Survival Rate for Women and Children\")\ndisplay(w_c_sr)\n\n# Adult men\na_m = df[(df['Sex'] == 1) & (df['Age'] &gt; 16)]\n\n# Survival Rate\na_m_sr = a_m[\"Survived\"].value_counts(normalize=True)\nprint(\"Survival Rate for Men\")\ndisplay(a_m_sr)\n\nSurvival Rate for Women and Children\n\n\n1    0.717514\n0    0.282486\nName: Survived, dtype: float64\n\n\nSurvival Rate for Men\n\n\n0    0.823383\n1    0.176617\nName: Survived, dtype: float64\n\n\n\nObservation\nIt seems that women and children were about 4x more likely to survive than adult men.\n\n\nChild Survival Rate\n\nchildren = df[df[\"Age\"] &lt; 16]\nchildren.describe()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nSex\nAge\nSibSp\nParch\nFare\n\n\n\n\ncount\n83.000000\n83.000000\n83.000000\n83.000000\n83.000000\n83.000000\n83.000000\n\n\nmean\n0.590361\n2.626506\n0.481928\n6.369518\n1.734940\n1.265060\n32.785795\n\n\nstd\n0.494757\n0.619024\n0.502711\n4.729063\n1.638592\n0.682255\n33.466438\n\n\nmin\n0.000000\n1.000000\n0.000000\n0.420000\n0.000000\n0.000000\n7.225000\n\n\n25%\n0.000000\n2.000000\n0.000000\n2.000000\n0.000000\n1.000000\n15.900000\n\n\n50%\n1.000000\n3.000000\n0.000000\n5.000000\n1.000000\n1.000000\n26.250000\n\n\n75%\n1.000000\n3.000000\n1.000000\n9.500000\n3.000000\n2.000000\n32.193750\n\n\nmax\n1.000000\n3.000000\n1.000000\n15.000000\n5.000000\n2.000000\n211.337500\n\n\n\n\n\n\n\n\nchildren.hist(figsize=(9,7))\n\narray([[&lt;Axes: title={'center': 'Survived'}&gt;,\n        &lt;Axes: title={'center': 'Pclass'}&gt;,\n        &lt;Axes: title={'center': 'Sex'}&gt;],\n       [&lt;Axes: title={'center': 'Age'}&gt;,\n        &lt;Axes: title={'center': 'SibSp'}&gt;,\n        &lt;Axes: title={'center': 'Parch'}&gt;],\n       [&lt;Axes: title={'center': 'Fare'}&gt;, &lt;Axes: &gt;, &lt;Axes: &gt;]],\n      dtype=object)\n\n\n\n\n\n\n\n\n\n\nage_list = df[\"Age\"].dropna()\nsns.displot(age_list, kind=\"ecdf\")\nplt.text(4.5, 1.075, \"Empirical Culumative Distribution Function (ECDF)\")\nplt.title(\"Distribution of Age of Passengers Aboard the Titanic\")\nplt.axvline(x=age_list.mean(), color=\"black\", linestyle=\"dashed\", label=\"Mean Age\")\nplt.axvline(x=18, color=\"red\", label=\"Age 18\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Probability of children's survival\n# Can also be seen in desciption table above Survived/mean\nchild_survival_probability = np.round(df[(df[\"Age\"] &lt; 16) & \n    (df[\"Survived\"] == 1)].shape[0] / children.shape[0], 4)\nchild_survival_probability\n\n0.5904\n\n\n\nObservation\n\nOnly 15 percent of the passengers aboard were under the age of 18.\nOnly about 59 percent of children survived which is lower than the overall survival rate (61 percent), and the women-and-children survival rate (71 percent)\n\n\n# Probability of women's survival\nwomen = df[(df['Sex'] == 0) & (df['Age'] &gt;= 16)]\nsurviving_women = df[(df['Sex'] == 0) & (df['Age'] &gt;= 16) & (df['Survived'] == 1)]\n\nwomen_survival_probability = np.round(surviving_women.shape[0] / women.shape[0], 4)\nwomen_survival_probability\n\n0.7752\n\n\n\n# Probability of men's survival\nmen = df[(df['Sex'] == 1) & (df['Age'] &gt;= 16)]\nsurviving_men = df[(df['Sex'] == 1) & (df['Age'] &gt;= 16) & (df['Survived'] == 1)]\n\nmen_survival_probability = np.round(surviving_men.shape[0] / men.shape[0], 4)\nmen_survival_probability\n\n0.1743\n\n\n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nx_axis = [\"Children\", \"Women\", \"Men\"]\ndata = [child_survival_probability, women_survival_probability, men_survival_probability]\nax.bar(x_axis, data)\nfor i in range(len(x_axis)):\n    plt.text(i, data[i] + 0.005, data[i], ha=\"center\")\nplt.title(\"Probability of Survival Aboard the Titanic\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nObservation\nWomen actually had the best chance of surviving and children had a pretty good chance, but men did not.\n\nLess than 1 in 5 men on the Titanic, (\\(&lt; 20 \\%\\)), survived\nAlmost 4 out of 5 women, (\\(\\approx 80 \\%\\)), survived."
  },
  {
    "objectID": "projects/titanic/EDA-titanic.html#which-feature-is-most-informative-to-survival-class-being-a-child-or-sex",
    "href": "projects/titanic/EDA-titanic.html#which-feature-is-most-informative-to-survival-class-being-a-child-or-sex",
    "title": "Titanic Data Set: Exploratory Data Analysis",
    "section": "Which feature is most informative to survival: class, being a child, or sex?",
    "text": "Which feature is most informative to survival: class, being a child, or sex?\n\nLooking at Surviving Men\n\nsurviving_men.describe()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nSex\nAge\nSibSp\nParch\nFare\n\n\n\n\ncount\n72.0\n72.000000\n72.0\n72.000000\n72.000000\n72.000000\n72.000000\n\n\nmean\n1.0\n1.888889\n1.0\n34.069444\n0.263889\n0.125000\n46.194621\n\n\nstd\n0.0\n0.957631\n0.0\n11.912032\n0.474507\n0.408966\n84.836068\n\n\nmin\n1.0\n1.000000\n1.0\n16.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n1.0\n1.000000\n1.0\n26.000000\n0.000000\n0.000000\n8.050000\n\n\n50%\n1.0\n1.000000\n1.0\n32.000000\n0.000000\n0.000000\n26.468750\n\n\n75%\n1.0\n3.000000\n1.0\n40.500000\n0.250000\n0.000000\n53.685425\n\n\nmax\n1.0\n3.000000\n1.0\n80.000000\n2.000000\n2.000000\n512.329200\n\n\n\n\n\n\n\n\nnot_surviving_men = df[(df['Sex'] == 1) & (df['Age'] &gt;= 16) & (df['Survived'] == 0)]\nnot_surviving_men.describe()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nSex\nAge\nSibSp\nParch\nFare\n\n\n\n\ncount\n341.0\n341.000000\n341.0\n341.000000\n341.000000\n341.000000\n341.000000\n\n\nmean\n0.0\n2.395894\n1.0\n32.983871\n0.266862\n0.175953\n22.438561\n\n\nstd\n0.0\n0.773750\n0.0\n13.115960\n0.560240\n0.582699\n33.134832\n\n\nmin\n0.0\n1.000000\n1.0\n16.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n0.0\n2.000000\n1.0\n23.000000\n0.000000\n0.000000\n7.875000\n\n\n50%\n0.0\n3.000000\n1.0\n30.000000\n0.000000\n0.000000\n10.500000\n\n\n75%\n0.0\n3.000000\n1.0\n40.000000\n0.000000\n0.000000\n26.000000\n\n\nmax\n0.0\n3.000000\n1.0\n74.000000\n4.000000\n5.000000\n263.000000\n\n\n\n\n\n\n\n\nObservation\n\nAvg. Fare for survivors was about 2x more: 46.19 (survived) / 22.44 (not survived)\nAvg. Class for survivors was also higher: 1.89 (survived) / 2.40 (not survived)\n\nRatios increase even more when considering the medians over the averages.\n\n# Percent Chance of surviving for a 1st class vs. 3rd class man\n\nfirst_class_men =  df[(df['Sex'] == 1) & (df['Age'] &gt; 16) & (df['Pclass'] == 1)]\nfirst_class_men_sr = np.round(first_class_men['Survived'].value_counts(normalize=True), 4)\n\ndisplay(first_class_men_sr)\n\nthird_class_men =  df[(df['Sex'] == 1) & (df['Age'] &gt; 16) & (df['Pclass'] == 3)]\nthird_class_men_sr = np.round(third_class_men['Survived'].value_counts(normalize=True), 4)\n\ndisplay(third_class_men_sr)\n\n0    0.6224\n1    0.3776\nName: Survived, dtype: float64\n\n\n0    0.8704\n1    0.1296\nName: Survived, dtype: float64\n\n\n\n\nObservation\nAn adult man in first class had a 3x better chance of surviving on the Titanic than an adult man in third class.\n\\[37.76\\% :: 12.96\\%\\]\n\nnot_survived = df[df[\"Survived\"] == 0]\nnot_survived.hist(figsize=(9,7))\n\narray([[&lt;Axes: title={'center': 'Survived'}&gt;,\n        &lt;Axes: title={'center': 'Pclass'}&gt;,\n        &lt;Axes: title={'center': 'Sex'}&gt;],\n       [&lt;Axes: title={'center': 'Age'}&gt;,\n        &lt;Axes: title={'center': 'SibSp'}&gt;,\n        &lt;Axes: title={'center': 'Parch'}&gt;],\n       [&lt;Axes: title={'center': 'Fare'}&gt;, &lt;Axes: &gt;, &lt;Axes: &gt;]],\n      dtype=object)\n\n\n\n\n\n\n\n\n\n\nsns.barplot(x='Pclass', y='Survived', hue=\"Sex\", data=df)\nplt.title(\"Survival of Men and Women Aboard the Titanic by Class\")\nplt.text(2.05, 0.75, \"Female: 0\\nMale: 1\")\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.barplot(x='Sex', y='Survived', hue=\"Pclass\", data=df)\nplt.title(\"Survival of Men and Women Aboard the Titanic by Class\")\nplt.xticks([0, 1], labels=[\"Female\", \"Male\"])\nplt.show()\n\n\n\n\n\n\n\n\n\n\nObservation\n\nWealthy women had an almost 100% survival rate.\n3rd class women had a 30 % higher survival rate than 1st class men.\n\nMost Informative Feature: Sex"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "OBS: I’m a work in progess.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTravel Board\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Victoria Handford",
    "section": "",
    "text": "Natural Language Processing, Developer, Data Scientist\n\n\n“For the things we have to learn before we can do them, we learn by doing them.”– Aristotle \n\n\n\n\n\n\n\nImportant\n\n\n\nThis website is still under construction."
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "PDF Resume"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Curriculum Vitae",
    "section": "Education",
    "text": "Education\n\nMSc Informatics: Language Technology\nUniversity of Oslo, Norway\nAugust 2023 - anticipated June 2025 Full-time Master’s program focusing on natural language processing (NLP), evaluation of large language models (LLMs), data science, statistics, and programming.\n\n\nBSc Informatics: Language Technology\nUniversity of Oslo, Norway\nAugust 2020 - June 2023\nFull-time Bachelor’s program covering a variety of subjects including, but not limited to, computer science and programming, natural language processing (NLP), machine learning and artificial intelligence, linguistics, and English.\n\n\nBA Music and German\nUniversity of Nebraska - Lincoln, USA\nAugust 2015 - June 2019 Full-time Bachelor’s program with a double major in classical voice andGerman language and literature."
  },
  {
    "objectID": "cv.html#work-experience",
    "href": "cv.html#work-experience",
    "title": "Curriculum Vitae",
    "section": "Work Experience",
    "text": "Work Experience\n\nData Scientist, Summer Intern\nNAV IT\nJune 2024- August 2024\n\nWorked as an “NLP Guru” in an interdisciplinary team to develop a retrieval-based chatbot to answer questions about the Norwegian pension system.\nImplemented a full stack application where my primary focus with the backend and data pipelines.\nProcessed and structured raw data to be used as the knowledge-base\nExplored possible no-code/low-code solutions\n\n\n\nTeaching Assistant\nUniversity of Oslo From August 2022\n\nMultiple different assistantships in a variety of subjects\n\nIN1000 - Introduction to Object-Oriented Programming\n\nIN1140 - Introduction to Language Technology\n\nIN4080 - Natural Language Processing\n\n\nHeld seminars and answered questions from students\nGraded obligatory assignments and provided helpful feedback\n\n\n\n\n\n\n\nAdditional TA Projects\n\n\n\nDuring my time at UiO, I have worked on a variety of projects alongside being a teaching assistant, including but not limited to administrative roles, resource development, and student representation for hiring new professors. Check them out here or in the “Projects” section!"
  },
  {
    "objectID": "cv.html#certifications-and-exams",
    "href": "cv.html#certifications-and-exams",
    "title": "Curriculum Vitae",
    "section": "Certifications and Exams",
    "text": "Certifications and Exams\n\nNatural Language Processing Specialization\nCoursera\nJuly 2023\nSpecialization in NLP with classification and vector spaces, probabilistic models, sequence models, and attention models.\n\n\nBergenstest\nFolkeuniversitet\nJanuary 2020\nExamination for Norwegian at an advanced level, needed to study at a Norwegian institute. This exam was replaced by the Norwegian Test C1 - higher academic level in 2022."
  },
  {
    "objectID": "cv.html#technical-skills",
    "href": "cv.html#technical-skills",
    "title": "Curriculum Vitae",
    "section": "Technical Skills",
    "text": "Technical Skills\nI have rated the following languages according to how comfortable I am with each from Basic to Proficient:\n\n\n\nLanguage\nLevel\n\n\n\n\nPython\nProficient\n\n\nMarkdown\nProficient\n\n\nJava\nIntermediate\n\n\nHTML\nIntermediate\n\n\nBash\nBasic (+)\n\n\n\nAdditionally, I have limited experience with R, SQL, Docker/Kubernetes, Kotlin, JavaScript, and TypeScript.\n\nPython Frameworks\n\nNatural Language Processing and Machine Learning:\n\nTransformers from HuggingFace\n\nPytorch\n\nSciKitLearn\n\nNatural Language Tool Kit (NLTK)\n\nRegEx\n\n\nData Science and Visualization:\n\nPandas\n\nMatplotLib\n\nJupyter Notebooks\n\nQuarto\n\nBootstrap\nSeaborn\n\nAltair\n\n\nAdditional\n\nNumPy\n\nBeautiful Soup\n\nFastAPI\n\nFastHTML"
  },
  {
    "objectID": "projects/titanic/titanic-description.html",
    "href": "projects/titanic/titanic-description.html",
    "title": "Titanic Description",
    "section": "",
    "text": "https://makeschool.org/mediabook/oa/tutorials/titanic-dataset-tutorial-an-intro-to-data-analysis-and-statistics-n40/\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn\ndf = pd.read_csv(\"data/titanic.csv\")\nprint(\"Shape:\", df.shape)\ndf.head()\n\nShape: (891, 12)\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS"
  },
  {
    "objectID": "projects/titanic/titanic-description.html#features-that-need-explanation",
    "href": "projects/titanic/titanic-description.html#features-that-need-explanation",
    "title": "Titanic Description",
    "section": "Features (that need explanation)",
    "text": "Features (that need explanation)\n\n\n\n\n\n\n\n\nFeature\nDefinition\nKey\n\n\n\n\nSurvived\nsurvival\n0 = no; 1 = yes\n\n\nPclass\nTicket Class\n1 = 1st; 2 = 2nd; 3 = 3rd\n\n\nSibSp\n# of sbilings/spouses aboard\n\n\n\nParch¹\n# of parents / children aboard\n\n\n\nEmbarked\nPort of Embarkment\nC = Cherbourg; Q = Queenstown; S = Southampton\n\n\n\nNotes:\n¹ Some children travelled only with a nanny, therefore \\(parch = 0\\) for them.\n² Age is a fraction if less than 1"
  },
  {
    "objectID": "projects/titanic/titanic-description.html#correlation",
    "href": "projects/titanic/titanic-description.html#correlation",
    "title": "Titanic Description",
    "section": "Correlation:",
    "text": "Correlation:\nCorrelation is expressed as number in the interval [-1, 1] and is not the probability that something occurs.\nPositive - there is a positive correlation between the two features: as one goes up, the other goes up.\nZero - there is no correlation, positive or negative between the two features.\nNegative - there is a negative correlation between the two features: as one goes up, the other goes down and vice versa.\n\n# `corr` works with columns only\ndf['Survived'].corr(df['Age'])\n#-7.72 %\n\n-0.0772210945721776\n\n\n\n# `str.get_dummies` creates dummy integer variables that correspon to \"male\"/\"female\"\n# `corrwith` works with a mix of rows and columns \ndf['Sex'].str.get_dummies().corrwith(df['Survived']/df['Survived'].max())\n\nfemale    0.543351\nmale     -0.543351\ndtype: float64\n\n\nConclusion after calculating correlation:\n\nSex and Survival (-54.3%)\nAge and Survival(-7.72 %)\n\n\nA passenger’s being a man was strongly negatively correlated with his survival aboard the titanic.\n\n\nA passenger’s being older was very weakly negatively correlated with survival."
  },
  {
    "objectID": "projects/titanic/titanic-description.html#covariance-vs.-correlation",
    "href": "projects/titanic/titanic-description.html#covariance-vs.-correlation",
    "title": "Titanic Description",
    "section": "Covariance vs. Correlation",
    "text": "Covariance vs. Correlation\ncovariance: the direction of the linear relationship between variables\ncorrelation: the strength and direction of the linear relationship"
  },
  {
    "objectID": "projects/titanic/titanic-description.html#correlation-matrix",
    "href": "projects/titanic/titanic-description.html#correlation-matrix",
    "title": "Titanic Description",
    "section": "Correlation Matrix",
    "text": "Correlation Matrix\n\ndf.corr()\n\n/tmp/ipykernel_6883/1134722465.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  df.corr()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nAge\nSibSp\nParch\nFare\n\n\n\n\nPassengerId\n1.000000\n-0.005007\n-0.035144\n0.036847\n-0.057527\n-0.001652\n0.012658\n\n\nSurvived\n-0.005007\n1.000000\n-0.338481\n-0.077221\n-0.035322\n0.081629\n0.257307\n\n\nPclass\n-0.035144\n-0.338481\n1.000000\n-0.369226\n0.083081\n0.018443\n-0.549500\n\n\nAge\n0.036847\n-0.077221\n-0.369226\n1.000000\n-0.308247\n-0.189119\n0.096067\n\n\nSibSp\n-0.057527\n-0.035322\n0.083081\n-0.308247\n1.000000\n0.414838\n0.159651\n\n\nParch\n-0.001652\n0.081629\n0.018443\n-0.189119\n0.414838\n1.000000\n0.216225\n\n\nFare\n0.012658\n0.257307\n-0.549500\n0.096067\n0.159651\n0.216225\n1.000000\n\n\n\n\n\n\n\n\n# with highlighting (seaborn)\n\nsn.heatmap(df.corr(), annot=True)\nplt.show()\n\n/tmp/ipykernel_6883/2452934198.py:3: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  sn.heatmap(df.corr(), annot=True)\n\n\n\n\n\n\n\n\n\nCorrelation map conclusion:\n\nhighest postive correlation: sibsp : parch -&gt; makes sense because family often travels together\nlowest negative correlation: Pclass : Fare -&gt; makes sense because lower class (i.e. 3rd class) tickets are cheapter than higher class (i.e 1st class) tickets.\nAge:Pclass -&gt; richer people are generally older"
  },
  {
    "objectID": "projects/titanic/titanic-description.html#text-values-to-numerical-values",
    "href": "projects/titanic/titanic-description.html#text-values-to-numerical-values",
    "title": "Titanic Description",
    "section": "Text Values to Numerical values",
    "text": "Text Values to Numerical values\n\ngenders = {\"male\": 1,\n           \"female\": 0\n           }\n\ndf[\"Sex\"] = df[\"Sex\"].map(genders)\n\nsn.heatmap(df.corr(), annot=True)\nplt.show()\n\n/tmp/ipykernel_6883/1333692183.py:7: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  sn.heatmap(df.corr(), annot=True)"
  },
  {
    "objectID": "projects/titanic/main.html",
    "href": "projects/titanic/main.html",
    "title": "Exploratory Data Analysis: Surviving the Titanic",
    "section": "",
    "text": "Starting point: Make School Tutorial\nData set: Titanic - Machine Learning from Disaster"
  },
  {
    "objectID": "projects/titanic/main.html#distribution-and-variance-of-the-features",
    "href": "projects/titanic/main.html#distribution-and-variance-of-the-features",
    "title": "Exploratory Data Analysis: Surviving the Titanic",
    "section": "Distribution and variance of the features",
    "text": "Distribution and variance of the features\n\n\nCode\nN = len(df)\n\ndef plot_feature_values():\n    ...\n\n\n\nSurvival\n\n\nCode\n# Set base values\nx = [\"No\", \"Yes\"]\ny = df[\"Survived\"].value_counts()\n\n# Convert values to percentages\ny = y / N\n\n# Plot\ng = plt.bar(range(len(x)), y, color=[\"tab:blue\", \"tab:orange\"])\nplt.xticks(range(len(x)), x)\nplt.bar_label(g, fmt='%.2f')\nplt.ylim(0, 0.75)\nplt.title(\"Survived?\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nPassenger Class\n\n\nCode\nvals  = [(x, y) for x, y in df[\"Pclass\"].value_counts().items()]\nvals.sort(key=lambda x: x[0])\n\nx = [elem[0] for elem in vals]\ny = [elem[1]/N for elem in vals]\n\n\ng = plt.bar(x, y, color=[\"tab:blue\", \"tab:orange\", \"tab:green\"])\nplt.xticks(x)\nplt.bar_label(g, fmt='%.2f')\nplt.ylim(0, 0.75)\n\nplt.title(\"Passenger Class\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nSex\n\n\nAge\n\n\nSibling and/or Spouses Aboard\n\n\nParents and/or Children Aboard\n\n\nFare\n\n\nPort of Embarkment"
  },
  {
    "objectID": "projects/dashboard/main.html",
    "href": "projects/dashboard/main.html",
    "title": "Travel Board",
    "section": "",
    "text": "The base of a personal dashboard assistant with information about travel"
  },
  {
    "objectID": "projects/dashboard/main.html#basic-travel-functionality",
    "href": "projects/dashboard/main.html#basic-travel-functionality",
    "title": "Travel Board",
    "section": "Basic Travel Functionality",
    "text": "Basic Travel Functionality\nThis is an example of using the API from Entur to generate three routes from Lillestrøm stasjon to Forskningsparken. For this sample, I have simply printed out the formatted GraphQL query used and the formatted result from the response.\n\nfrom dashboard import main\nfrom pathlib import Path\n\nargs = lambda: None\nargs.URL = \"https://api.entur.io/journey-planner/v3/graphql\"\nargs.DIR = Path(\"\")\nargs.TEMPLATE_DIR = Path(\"query_templates/\")\n\nassert args.DIR.exists(), \"No data directory found\"\nassert args.TEMPLATE_DIR.exists(), \"No template directory found\"\n\nmain(args)\n\nFrom Lillestrøm stasjon to Forskningsparken:\n============================================\nQUERY:\n{\n  trip(\n    from: {\n      place:\"NSR:StopPlace:62339\"\n            name:\"Lillestrøm stasjon, Lillestrøm\" \n    }\n    to: {\n      place:\"NSR:StopPlace:59600\"\n      name:\"Forskningsparken, Oslo\"\n    }\n    numTripPatterns: 3\n    dateTime: \"2024-08-27T16:38:33.312458+02:00\"\n    walkSpeed: 1.3\n    arriveBy: false\n  )\n  {\n    tripPatterns {\n      expectedStartTime\n      duration\n      walkDistance\n      legs {\n        mode\n        distance\n        line {\n          id\n          publicCode\n        }\n      }\n    }\n  }\n} \n\nRESULT:\nTrip 1:\nLeave by: 2024-08-27 16:39:24+02:00\nDuration: 1502\nWalking: 369.76\nLegs: [\n    Mode: rail, Line: RE10, \n    Mode: foot, \n    Mode: metro, Line: 5]\n\nTrip 2:\nLeave by: 2024-08-27 16:47:51+02:00\nDuration: 1612\nWalking: 352.84\nLegs: [\n    Mode: rail, Line: R14, \n    Mode: foot, \n    Mode: metro, Line: 5]\n\nTrip 3:\nLeave by: 2024-08-27 16:56:00+02:00\nDuration: 1680\nWalking: 352.84\nLegs: [\n    Mode: rail, Line: R12, \n    Mode: foot, \n    Mode: metro, Line: 4]"
  },
  {
    "objectID": "projects/dashboard/main.html#interactive-version-incomplete",
    "href": "projects/dashboard/main.html#interactive-version-incomplete",
    "title": "Travel Board",
    "section": "Interactive Version (Incomplete)",
    "text": "Interactive Version (Incomplete)\n\nDeparture:  Choose here Lillestrøm stasjon Oslo S Forskningsparken  Destination:   Choose here Lillestrøm stasjon Oslo S Forskningsparken  Submit"
  }
]